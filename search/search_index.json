{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AIoT Docs AIoT Docs\u306b\u3064\u3044\u3066 AIoT Docs\u306f\u3001Chirment\u3068Teachable Machine\u3068Artec block\u306e\u5b66\u7fd2\u7528\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\u3002 \u4fee\u6b63\u4f9d\u983c\u7b49 Github\u306eRepo\u306b Issues \u3092\u3042\u3052\u308b\u3002 \u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306e\u30bb\u30df\u30ca\u30fc\u306e\u5b9f\u65bd AI Robot Car JetRacer Docs JetBot Docs DonkeyCar Docs","title":"AIoT Docs"},{"location":"#aiot-docs","text":"","title":"AIoT Docs"},{"location":"#aiot-docs_1","text":"AIoT Docs\u306f\u3001Chirment\u3068Teachable Machine\u3068Artec block\u306e\u5b66\u7fd2\u7528\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3059\u3002","title":"AIoT Docs\u306b\u3064\u3044\u3066"},{"location":"#_1","text":"Github\u306eRepo\u306b Issues \u3092\u3042\u3052\u308b\u3002","title":"\u4fee\u6b63\u4f9d\u983c\u7b49"},{"location":"#_2","text":"","title":"\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306e\u30bb\u30df\u30ca\u30fc\u306e\u5b9f\u65bd"},{"location":"#ai-robot-car","text":"JetRacer Docs JetBot Docs DonkeyCar Docs","title":"AI Robot Car"},{"location":"01.AI\u9023\u643a/01.ai/","text":"Teachable Machine Teachable Machine\u3092\u4f5c\u3063\u3066Model\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 Teachable Machine New Project Teachable Machine\u306e Teachable Machine \u306e\u30da\u30fc\u30b8\u306b\u79fb\u52d5\u3057\u3001Image Project\u3092\u9078\u629e\u3057\u307e\u3059\u3002 Dataset\u306e\u4f5c\u6210 \u5b66\u7fd2 \u63a8\u8ad6 \u51fa\u529b P5 Editor\u3067\u7de8\u96c6\u3057\u307e\u3059\u3002 Upload my model \u3092\u9078\u629e\u3057\u3001\u30e2\u30c7\u30eb\u3092\u30b5\u30fc\u30d0\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 \u5171\u6709\u53ef\u80fd\u306a\u30ea\u30f3\u30af\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e15\u884c\u76ee\u306e imageModeURL \u306e model.json \u3088\u308a\u524d\u306e\u90e8\u5206\u3092\u3001\u3053\u306e\u30ea\u30f3\u30af\u306b\u66f8\u304d\u76f4\u3057\u307e\u3059\u3002 p5.js \u3092\u9078\u629e\u3057\u3001 p5.js Web Editor \u3092\u9078\u629e\u3057\u3001p5 Editor\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 15\u884c\u76ee\u306eimageModelURL\u3092\u767a\u884c\u3055\u308c\u305fURL\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\u6700\u5f8c\u306e\u3001 model.json \u306f\u6d88\u3055\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 // Copyright (c) 2019 ml5 // // This software is released under the MIT License. // https://opensource.org/licenses/MIT /* === ml5 Example Webcam Image Classification using a pre-trained customized model and p5.js This example uses p5 preload function to create the classifier === */ // Classifier Variable let classifier ; // Model URL let imageModelURL = 'https://teachablemachine.withgoogle.com/models/bXy2kDNi/model.json' ; // Video let video ; let flippedVideo ; // To store the classification let label = \"\" ; // Load the model first function preload () { classifier = ml5 . imageClassifier ( imageModelURL ); } function setup () { createCanvas ( 320 , 260 ); // Create the video video = createCapture ( VIDEO ); video . size ( 320 , 240 ); video . hide (); flippedVideo = ml5 . flipImage ( video ) // Start classifying classifyVideo (); } function draw () { background ( 0 ); // Draw the video image ( flippedVideo , 0 , 0 ); // Draw the label fill ( 255 ); textSize ( 16 ); textAlign ( CENTER ); text ( label , width / 2 , height - 4 ); } // Get a prediction for the current video frame function classifyVideo () { flippedVideo = ml5 . flipImage ( video ) classifier . classify ( flippedVideo , gotResult ); } // When we get a result function gotResult ( error , results ) { // If there is an error if ( error ) { console . error ( error ); return ; } // The results are in an array ordered by confidence. // console.log(results[0]); label = results [ 0 ]. label ; // Classifiy again! classifyVideo (); }","title":"Teachable Machine"},{"location":"01.AI\u9023\u643a/01.ai/#teachable-machine","text":"Teachable Machine\u3092\u4f5c\u3063\u3066Model\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 Teachable Machine","title":"Teachable Machine"},{"location":"01.AI\u9023\u643a/01.ai/#new-project","text":"Teachable Machine\u306e Teachable Machine \u306e\u30da\u30fc\u30b8\u306b\u79fb\u52d5\u3057\u3001Image Project\u3092\u9078\u629e\u3057\u307e\u3059\u3002","title":"New Project"},{"location":"01.AI\u9023\u643a/01.ai/#dataset","text":"","title":"Dataset\u306e\u4f5c\u6210"},{"location":"01.AI\u9023\u643a/01.ai/#_1","text":"","title":"\u5b66\u7fd2"},{"location":"01.AI\u9023\u643a/01.ai/#_2","text":"","title":"\u63a8\u8ad6"},{"location":"01.AI\u9023\u643a/01.ai/#_3","text":"P5 Editor\u3067\u7de8\u96c6\u3057\u307e\u3059\u3002 Upload my model \u3092\u9078\u629e\u3057\u3001\u30e2\u30c7\u30eb\u3092\u30b5\u30fc\u30d0\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 \u5171\u6709\u53ef\u80fd\u306a\u30ea\u30f3\u30af\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e15\u884c\u76ee\u306e imageModeURL \u306e model.json \u3088\u308a\u524d\u306e\u90e8\u5206\u3092\u3001\u3053\u306e\u30ea\u30f3\u30af\u306b\u66f8\u304d\u76f4\u3057\u307e\u3059\u3002 p5.js \u3092\u9078\u629e\u3057\u3001 p5.js Web Editor \u3092\u9078\u629e\u3057\u3001p5 Editor\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 15\u884c\u76ee\u306eimageModelURL\u3092\u767a\u884c\u3055\u308c\u305fURL\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\u6700\u5f8c\u306e\u3001 model.json \u306f\u6d88\u3055\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 // Copyright (c) 2019 ml5 // // This software is released under the MIT License. // https://opensource.org/licenses/MIT /* === ml5 Example Webcam Image Classification using a pre-trained customized model and p5.js This example uses p5 preload function to create the classifier === */ // Classifier Variable let classifier ; // Model URL let imageModelURL = 'https://teachablemachine.withgoogle.com/models/bXy2kDNi/model.json' ; // Video let video ; let flippedVideo ; // To store the classification let label = \"\" ; // Load the model first function preload () { classifier = ml5 . imageClassifier ( imageModelURL ); } function setup () { createCanvas ( 320 , 260 ); // Create the video video = createCapture ( VIDEO ); video . size ( 320 , 240 ); video . hide (); flippedVideo = ml5 . flipImage ( video ) // Start classifying classifyVideo (); } function draw () { background ( 0 ); // Draw the video image ( flippedVideo , 0 , 0 ); // Draw the label fill ( 255 ); textSize ( 16 ); textAlign ( CENTER ); text ( label , width / 2 , height - 4 ); } // Get a prediction for the current video frame function classifyVideo () { flippedVideo = ml5 . flipImage ( video ) classifier . classify ( flippedVideo , gotResult ); } // When we get a result function gotResult ( error , results ) { // If there is an error if ( error ) { console . error ( error ); return ; } // The results are in an array ordered by confidence. // console.log(results[0]); label = results [ 0 ]. label ; // Classifiy again! classifyVideo (); }","title":"\u51fa\u529b"},{"location":"01.AI\u9023\u643a/02.result/","text":"\u63a8\u8ad6\u306e\u7d50\u679c\u3068\u306e\u9023\u643a \u63a8\u8ad6\u306e\u7d50\u679c\u306f\u3001 gotResult() \u3067\u53d6\u5f97\u53ef\u80fd\u3067\u3059\u3002 sketch.js LED\u3092GPIO4, GPIO5\u306b\u5dee\u3057\u8fbc\u307f\u307e\u3059\u3002 sketch.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 // Copyright (c) 2019 ml5 // // This software is released under the MIT License. // https://opensource.org/licenses/MIT /* === ml5 Example Webcam Image Classification using a pre-trained customized model and p5.js This example uses p5 preload function to create the classifier === */ // Classifier Variable let classifier ; // Model URL let imageModelURL = 'https://teachablemachine.withgoogle.com/models/bXy2kDNi/model.json' ; // Video let video ; let flippedVideo ; // To store the classification let label = \"\" ; // Load the model first function preload () { classifier = ml5 . imageClassifier ( imageModelURL ); } function setup () { createCanvas ( 320 , 260 ); // Create the video video = createCapture ( VIDEO ); video . size ( 320 , 240 ); video . hide (); flippedVideo = ml5 . flipImage ( video ) // Start classifying classifyVideo (); } function draw () { background ( 0 ); // Draw the video image ( flippedVideo , 0 , 0 ); // Draw the label fill ( 255 ); textSize ( 16 ); textAlign ( CENTER ); text ( label , width / 2 , height - 4 ); } // Get a prediction for the current video frame function classifyVideo () { flippedVideo = ml5 . flipImage ( video ) classifier . classify ( flippedVideo , gotResult ); } // When we get a result function gotResult ( error , results ) { // If there is an error if ( error ) { console . error ( error ); return ; } // The results are in an array ordered by confidence. // console.log(results[0]); label = results [ 0 ]. label ; if ( label == \"box\" ) { console . log ( \"Find box\" ); } else if ( label == \"arduino\" ) { console . log ( \"Find arduino\" ); } // Classifiy again! classifyVideo (); }","title":"\u63a8\u8ad6\u306e\u7d50\u679c\u3068\u306e\u9023\u643a"},{"location":"01.AI\u9023\u643a/02.result/#_1","text":"\u63a8\u8ad6\u306e\u7d50\u679c\u306f\u3001 gotResult() \u3067\u53d6\u5f97\u53ef\u80fd\u3067\u3059\u3002","title":"\u63a8\u8ad6\u306e\u7d50\u679c\u3068\u306e\u9023\u643a"},{"location":"01.AI\u9023\u643a/02.result/#sketchjs","text":"LED\u3092GPIO4, GPIO5\u306b\u5dee\u3057\u8fbc\u307f\u307e\u3059\u3002 sketch.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 // Copyright (c) 2019 ml5 // // This software is released under the MIT License. // https://opensource.org/licenses/MIT /* === ml5 Example Webcam Image Classification using a pre-trained customized model and p5.js This example uses p5 preload function to create the classifier === */ // Classifier Variable let classifier ; // Model URL let imageModelURL = 'https://teachablemachine.withgoogle.com/models/bXy2kDNi/model.json' ; // Video let video ; let flippedVideo ; // To store the classification let label = \"\" ; // Load the model first function preload () { classifier = ml5 . imageClassifier ( imageModelURL ); } function setup () { createCanvas ( 320 , 260 ); // Create the video video = createCapture ( VIDEO ); video . size ( 320 , 240 ); video . hide (); flippedVideo = ml5 . flipImage ( video ) // Start classifying classifyVideo (); } function draw () { background ( 0 ); // Draw the video image ( flippedVideo , 0 , 0 ); // Draw the label fill ( 255 ); textSize ( 16 ); textAlign ( CENTER ); text ( label , width / 2 , height - 4 ); } // Get a prediction for the current video frame function classifyVideo () { flippedVideo = ml5 . flipImage ( video ) classifier . classify ( flippedVideo , gotResult ); } // When we get a result function gotResult ( error , results ) { // If there is an error if ( error ) { console . error ( error ); return ; } // The results are in an array ordered by confidence. // console.log(results[0]); label = results [ 0 ]. label ; if ( label == \"box\" ) { console . log ( \"Find box\" ); } else if ( label == \"arduino\" ) { console . log ( \"Find arduino\" ); } // Classifiy again! classifyVideo (); }","title":"sketch.js"},{"location":"01.AI\u9023\u643a/03.debug/","text":"\u30c7\u30d0\u30c3\u30af \u30c7\u30d0\u30c3\u30af\u3059\u308b\u969b\u306f\u3001Chrome\u642d\u8f09\u306e\u30c7\u30d0\u30c3\u30af\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\u3002","title":"\u30c7\u30d0\u30c3\u30af"},{"location":"01.AI\u9023\u643a/03.debug/#_1","text":"\u30c7\u30d0\u30c3\u30af\u3059\u308b\u969b\u306f\u3001Chrome\u642d\u8f09\u306e\u30c7\u30d0\u30c3\u30af\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\u3002","title":"\u30c7\u30d0\u30c3\u30af"},{"location":"01.AI\u9023\u643a/04.aijs/","text":"Chirimen(LED) Teachable Machine\u3067\u51fa\u529b\u3057\u305fJavaScript\u306bChirimen\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53d6\u308a\u8fbc\u307f\u307e\u3059\u3002 index.html <script src=\"https://r.chirimen.org/polyfill.js\"></script> \u3092\u8ffd\u8a18\u3057\u307e\u3059\u3002 index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 < html > < head > < meta charset = \"UTF-8\" > < title > Webcam Image Classification using a pre - trained customized model and p5 . js < /title> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js\" >< /script> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.min.js\" >< /script> < script src = \"https://unpkg.com/ml5@0.4.3/dist/ml5.min.js\" type = \"text/javascript\" >< /script> < script src = \"https://r.chirimen.org/polyfill.js\" >< /script> < /head> < body > < h1 > Teachable Machine < /h1> < p > This is a demonstration of image classification using a model trained with Google ' s Teachable Machine project . If you cover the camera , this model will classify the image as \"nighttime,\" otherwise will classify anything else as \"daytime.\" < /p> < script src = \"sketch.js\" >< /script> < /body> < /html> sketch.js LED\u3092GPIO4, GPIO5\u306b\u5dee\u3057\u8fbc\u307f\u307e\u3059\u3002 sketch.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 // Copyright (c) 2019 ml5 // // This software is released under the MIT License. // https://opensource.org/licenses/MIT /* === ml5 Example Webcam Image Classification using a pre-trained customized model and p5.js This example uses p5 preload function to create the classifier === */ // Classifier Variable let classifier ; // Model URL let imageModelURL = 'https://teachablemachine.withgoogle.com/models/bXy2kDNi/model.json' ; // Video let video ; let flippedVideo ; // To store the classification let label = \"\" ; // port let port4 ; let port5 ; // Load the model first function preload () { classifier = ml5 . imageClassifier ( imageModelURL ); } async function init () { var gpioAccess = await navigator . requestGPIOAccess (); port4 = gpioAccess . ports . get ( 4 ); port5 = gpioAccess . ports . get ( 5 ); await port4 . export ( \"out\" ); await port5 . export ( \"out\" ); } function setup () { init (); createCanvas ( 320 , 260 ); // Create the video video = createCapture ( VIDEO ); video . size ( 320 , 240 ); video . hide (); flippedVideo = ml5 . flipImage ( video ) // Start classifying classifyVideo (); } function draw () { background ( 0 ); // Draw the video image ( flippedVideo , 0 , 0 ); // Draw the label fill ( 255 ); textSize ( 16 ); textAlign ( CENTER ); text ( label , width / 2 , height - 4 ); } // Get a prediction for the current video frame function classifyVideo () { flippedVideo = ml5 . flipImage ( video ) classifier . classify ( flippedVideo , gotResult ); } // When we get a result function gotResult ( error , results ) { // If there is an error if ( error ) { console . error ( error ); return ; } // The results are in an array ordered by confidence. // console.log(results[0]); label = results [ 0 ]. label ; if ( label == \"box\" ) { port4 . write ( 0 ); port5 . write ( 1 ); } else if ( label == \"arduino\" ) { port4 . write ( 1 ); port5 . write ( 0 ); } // Classifiy again! classifyVideo (); }","title":"Chirimen(LED)"},{"location":"01.AI\u9023\u643a/04.aijs/#chirimenled","text":"Teachable Machine\u3067\u51fa\u529b\u3057\u305fJavaScript\u306bChirimen\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53d6\u308a\u8fbc\u307f\u307e\u3059\u3002","title":"Chirimen(LED)"},{"location":"01.AI\u9023\u643a/04.aijs/#indexhtml","text":"<script src=\"https://r.chirimen.org/polyfill.js\"></script> \u3092\u8ffd\u8a18\u3057\u307e\u3059\u3002 index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 < html > < head > < meta charset = \"UTF-8\" > < title > Webcam Image Classification using a pre - trained customized model and p5 . js < /title> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js\" >< /script> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.min.js\" >< /script> < script src = \"https://unpkg.com/ml5@0.4.3/dist/ml5.min.js\" type = \"text/javascript\" >< /script> < script src = \"https://r.chirimen.org/polyfill.js\" >< /script> < /head> < body > < h1 > Teachable Machine < /h1> < p > This is a demonstration of image classification using a model trained with Google ' s Teachable Machine project . If you cover the camera , this model will classify the image as \"nighttime,\" otherwise will classify anything else as \"daytime.\" < /p> < script src = \"sketch.js\" >< /script> < /body> < /html>","title":"index.html"},{"location":"01.AI\u9023\u643a/04.aijs/#sketchjs","text":"LED\u3092GPIO4, GPIO5\u306b\u5dee\u3057\u8fbc\u307f\u307e\u3059\u3002 sketch.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 // Copyright (c) 2019 ml5 // // This software is released under the MIT License. // https://opensource.org/licenses/MIT /* === ml5 Example Webcam Image Classification using a pre-trained customized model and p5.js This example uses p5 preload function to create the classifier === */ // Classifier Variable let classifier ; // Model URL let imageModelURL = 'https://teachablemachine.withgoogle.com/models/bXy2kDNi/model.json' ; // Video let video ; let flippedVideo ; // To store the classification let label = \"\" ; // port let port4 ; let port5 ; // Load the model first function preload () { classifier = ml5 . imageClassifier ( imageModelURL ); } async function init () { var gpioAccess = await navigator . requestGPIOAccess (); port4 = gpioAccess . ports . get ( 4 ); port5 = gpioAccess . ports . get ( 5 ); await port4 . export ( \"out\" ); await port5 . export ( \"out\" ); } function setup () { init (); createCanvas ( 320 , 260 ); // Create the video video = createCapture ( VIDEO ); video . size ( 320 , 240 ); video . hide (); flippedVideo = ml5 . flipImage ( video ) // Start classifying classifyVideo (); } function draw () { background ( 0 ); // Draw the video image ( flippedVideo , 0 , 0 ); // Draw the label fill ( 255 ); textSize ( 16 ); textAlign ( CENTER ); text ( label , width / 2 , height - 4 ); } // Get a prediction for the current video frame function classifyVideo () { flippedVideo = ml5 . flipImage ( video ) classifier . classify ( flippedVideo , gotResult ); } // When we get a result function gotResult ( error , results ) { // If there is an error if ( error ) { console . error ( error ); return ; } // The results are in an array ordered by confidence. // console.log(results[0]); label = results [ 0 ]. label ; if ( label == \"box\" ) { port4 . write ( 0 ); port5 . write ( 1 ); } else if ( label == \"arduino\" ) { port4 . write ( 1 ); port5 . write ( 0 ); } // Classifiy again! classifyVideo (); }","title":"sketch.js"},{"location":"01.AI\u9023\u643a/05.servo/","text":"Chirimen(Servo) Servo\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 index.html <script src=\"https://r.chirimen.org/pca9685.js\"></script> \u3092\u8ffd\u8a18\u3057\u307e\u3059\u3002 index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 < html > < head > < meta charset = \"UTF-8\" > < title > Webcam Image Classification using a pre - trained customized model and p5 . js < /title> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js\" >< /script> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.min.js\" >< /script> < script src = \"https://unpkg.com/ml5@0.4.3/dist/ml5.min.js\" type = \"text/javascript\" >< /script> < script src = \"https://r.chirimen.org/polyfill.js\" >< /script> < script src = \"https://r.chirimen.org/pca9685.js\" >< /script> < /head> < body > < h1 > Teachable Machine < /h1> < p > This is a demonstration of image classification using a model trained with Google ' s Teachable Machine project . If you cover the camera , this model will classify the image as \"nighttime,\" otherwise will classify anything else as \"daytime.\" < /p> < script src = \"sketch.js\" >< /script> < /body> < /html> sketch.js Servo\u3092\u64cd\u4f5c\u3057\u307e\u3059\u3002 sketch.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 // Copyright (c) 2019 ml5 // // This software is released under the MIT License. // https://opensource.org/licenses/MIT /* === ml5 Example Webcam Image Classification using a pre-trained customized model and p5.js This example uses p5 preload function to create the classifier === */ // Classifier Variable let classifier ; // Model URL let imageModelURL = 'https://teachablemachine.withgoogle.com/models/bXy2kDNi/model.json' ; // Video let video ; let flippedVideo ; // To store the classification let label = \"\" ; // port let port4 ; let port5 ; // Servo let pca9685 ; // Load the model first function preload () { classifier = ml5 . imageClassifier ( imageModelURL ); } async function init () { var gpioAccess = await navigator . requestGPIOAccess (); port4 = gpioAccess . ports . get ( 4 ); port5 = gpioAccess . ports . get ( 5 ); await port4 . export ( \"out\" ); await port5 . export ( \"out\" ); var i2cAccess = await navigator . requestI2CAccess (); var port = i2cAccess . ports . get ( 1 ); pca9685 = new PCA9685 ( port , 0x40 ); } function setup () { init (); createCanvas ( 320 , 260 ); // Create the video video = createCapture ( VIDEO ); video . size ( 320 , 240 ); video . hide (); flippedVideo = ml5 . flipImage ( video ) // Start classifying classifyVideo (); } function draw () { background ( 0 ); // Draw the video image ( flippedVideo , 0 , 0 ); // Draw the label fill ( 255 ); textSize ( 16 ); textAlign ( CENTER ); text ( label , width / 2 , height - 4 ); } // Get a prediction for the current video frame function classifyVideo () { flippedVideo = ml5 . flipImage ( video ) classifier . classify ( flippedVideo , gotResult ); } // Servo async function controlServo ( angle ) { await pca9685 . setServo ( 0 , angle ); } // When we get a result function gotResult ( error , results ) { // If there is an error if ( error ) { console . error ( error ); return ; } // The results are in an array ordered by confidence. // console.log(results[0]); label = results [ 0 ]. label ; if ( label == \"box\" ) { port4 . write ( 0 ); port5 . write ( 1 ); controlServo ( 0 ); } else if ( label == \"arduino\" ) { port4 . write ( 1 ); port5 . write ( 0 ); controlServo ( 90 ); } // Classifiy again! classifyVideo (); }","title":"Chirimen(Servo)"},{"location":"01.AI\u9023\u643a/05.servo/#chirimenservo","text":"Servo\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"Chirimen(Servo)"},{"location":"01.AI\u9023\u643a/05.servo/#indexhtml","text":"<script src=\"https://r.chirimen.org/pca9685.js\"></script> \u3092\u8ffd\u8a18\u3057\u307e\u3059\u3002 index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 < html > < head > < meta charset = \"UTF-8\" > < title > Webcam Image Classification using a pre - trained customized model and p5 . js < /title> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js\" >< /script> < script src = \"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.min.js\" >< /script> < script src = \"https://unpkg.com/ml5@0.4.3/dist/ml5.min.js\" type = \"text/javascript\" >< /script> < script src = \"https://r.chirimen.org/polyfill.js\" >< /script> < script src = \"https://r.chirimen.org/pca9685.js\" >< /script> < /head> < body > < h1 > Teachable Machine < /h1> < p > This is a demonstration of image classification using a model trained with Google ' s Teachable Machine project . If you cover the camera , this model will classify the image as \"nighttime,\" otherwise will classify anything else as \"daytime.\" < /p> < script src = \"sketch.js\" >< /script> < /body> < /html>","title":"index.html"},{"location":"01.AI\u9023\u643a/05.servo/#sketchjs","text":"Servo\u3092\u64cd\u4f5c\u3057\u307e\u3059\u3002 sketch.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 // Copyright (c) 2019 ml5 // // This software is released under the MIT License. // https://opensource.org/licenses/MIT /* === ml5 Example Webcam Image Classification using a pre-trained customized model and p5.js This example uses p5 preload function to create the classifier === */ // Classifier Variable let classifier ; // Model URL let imageModelURL = 'https://teachablemachine.withgoogle.com/models/bXy2kDNi/model.json' ; // Video let video ; let flippedVideo ; // To store the classification let label = \"\" ; // port let port4 ; let port5 ; // Servo let pca9685 ; // Load the model first function preload () { classifier = ml5 . imageClassifier ( imageModelURL ); } async function init () { var gpioAccess = await navigator . requestGPIOAccess (); port4 = gpioAccess . ports . get ( 4 ); port5 = gpioAccess . ports . get ( 5 ); await port4 . export ( \"out\" ); await port5 . export ( \"out\" ); var i2cAccess = await navigator . requestI2CAccess (); var port = i2cAccess . ports . get ( 1 ); pca9685 = new PCA9685 ( port , 0x40 ); } function setup () { init (); createCanvas ( 320 , 260 ); // Create the video video = createCapture ( VIDEO ); video . size ( 320 , 240 ); video . hide (); flippedVideo = ml5 . flipImage ( video ) // Start classifying classifyVideo (); } function draw () { background ( 0 ); // Draw the video image ( flippedVideo , 0 , 0 ); // Draw the label fill ( 255 ); textSize ( 16 ); textAlign ( CENTER ); text ( label , width / 2 , height - 4 ); } // Get a prediction for the current video frame function classifyVideo () { flippedVideo = ml5 . flipImage ( video ) classifier . classify ( flippedVideo , gotResult ); } // Servo async function controlServo ( angle ) { await pca9685 . setServo ( 0 , angle ); } // When we get a result function gotResult ( error , results ) { // If there is an error if ( error ) { console . error ( error ); return ; } // The results are in an array ordered by confidence. // console.log(results[0]); label = results [ 0 ]. label ; if ( label == \"box\" ) { port4 . write ( 0 ); port5 . write ( 1 ); controlServo ( 0 ); } else if ( label == \"arduino\" ) { port4 . write ( 1 ); port5 . write ( 0 ); controlServo ( 90 ); } // Classifiy again! classifyVideo (); }","title":"sketch.js"},{"location":"01.AI\u9023\u643a/06.hardware/","text":"FaBo\u9023\u643a\u53ef\u80fd\u306a\u30e9\u30a4\u30d6\u30e9\u30ea I2C\u306e\u8a8d\u8b58\u72b6\u6cc1\u306e\u78ba\u8a8d\u306b\u306f I2C Detect \u3092\u7528\u3044\u307e\u3059\u3002 FaBo Chirimen\u30e9\u30a4\u30d6\u30e9\u30ea #103 Button GPIO-Button #201 3Axis [I2C-Grove-Accelerometer ](https://r.chirimen.org/jsbin-i2c-grove-accelerometer) #207 Templerature I2C-ADT7410","title":"FaBo\u9023\u643a\u53ef\u80fd\u306a\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"01.AI\u9023\u643a/06.hardware/#fabo","text":"I2C\u306e\u8a8d\u8b58\u72b6\u6cc1\u306e\u78ba\u8a8d\u306b\u306f I2C Detect \u3092\u7528\u3044\u307e\u3059\u3002 FaBo Chirimen\u30e9\u30a4\u30d6\u30e9\u30ea #103 Button GPIO-Button #201 3Axis [I2C-Grove-Accelerometer ](https://r.chirimen.org/jsbin-i2c-grove-accelerometer) #207 Templerature I2C-ADT7410","title":"FaBo\u9023\u643a\u53ef\u80fd\u306a\u30e9\u30a4\u30d6\u30e9\u30ea"}]}